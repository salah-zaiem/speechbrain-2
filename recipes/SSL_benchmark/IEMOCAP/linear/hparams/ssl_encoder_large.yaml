# ########################################
# Emotion recognition from speech using ssl encoder
# For more encoder results, please see https://arxiv.org/pdf/2111.02735.pdf
# ########################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
# Dataset will be downloaded to the `data_original`
data_folder: /home/infres/ext-6343/venv_git_superb/The-audio-benchmark/speechbrain-develop/downstream/IEMOCAP/data/IEMOCAP_full_release # e.g., /path/to/IEMOCAP_full_release
output_folder: !ref tmp/hubert_large/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the ssl encoder model, you can change to benchmark diffrenet models
# Important: we use ssl encoder base and not the fine-tuned one with ASR task
# This allow you to have ~4% improvment
hub: facebook/hubert-large-ll60k
num_layers: 25 
weights_path: !ref <save_folder>/weights.ckpt
# different speakers for train, valid and test sets
different_speakers: True
# which speaker is used for test set, value from 1 to 10
# Change this value and run this value 10 times and take the mean of it
test_spk_id: 1

# Path where data manifest files will be stored
train_annotation: !ref <output_folder>/train.json
valid_annotation: !ref <output_folder>/valid.json
test_annotation: !ref <output_folder>/test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 30
batch_size: 2
lr: 0.0002
lr_encoder: 0.01

#freeze all encoder
freeze_encoder: True
#set to true to freeze the CONV part of the encoder model
# We see an improvement of 2% with freezing CNNs
freeze_encoder_conv: True

# Model parameters
encoder_dim: 1024

# Number of emotions
out_n_neurons: 4 # (anger, happiness, sadness, neutral)

dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: 2  # 2 on linux but 0 works on windows
    drop_last: False

avg_pool: !new:speechbrain.nnet.pooling.StatisticsPooling
    return_std: False

output_mlp: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <encoder_dim>
    n_neurons: !ref <out_n_neurons>
    bias: False

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

modules:
    output_mlp: !ref <output_mlp>

model: !new:torch.nn.ModuleList
    - [!ref <output_mlp>]

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

compute_cost: !name:speechbrain.nnet.losses.nll_loss

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

encoder_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_encoder>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0

lr_annealing_encoder: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_encoder>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        lr_annealing_output: !ref <lr_annealing>
        lr_annealing_encoder: !ref <lr_annealing_encoder>
        counter: !ref <epoch_counter>
